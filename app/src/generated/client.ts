/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * „Éá„É¢Áî® API
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
export type UpdateTaskBody = {
  /** „Çø„Ç§„Éà„É´ */
  title?: string;
  /** ÂÆå‰∫ÜÊó•ÊôÇ */
  finishedAt?: string | null;
};

export interface Task {
  /** ID (CUID) */
  id: string;
  /** „Çø„Ç§„Éà„É´ */
  title: string;
  /** ‰ΩúÊàêÊó•ÊôÇ */
  createdAt: string;
  /** ÂÆå‰∫ÜÊó•ÊôÇ */
  finishedAt: string | null;
}

export type UpdateTask200 = {
  task: Task;
};

export type CreateTask201 = {
  task: Task;
};

export type ListTasks200 = {
  tasks: Task[];
};



type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


export const listTasks = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ListTasks200>> => {
    return axios.get(
      `/api/tasks`,options
    );
  }


export const getListTasksQueryKey = () => [`/api/tasks`] as const;
  

    
export const getListTasksQueryOptions = <TData = Awaited<ReturnType<typeof listTasks>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listTasks>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof listTasks>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListTasksQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof listTasks>>> = ({ signal }) => listTasks({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ListTasksQueryResult = NonNullable<Awaited<ReturnType<typeof listTasks>>>
export type ListTasksQueryError = AxiosError<unknown>

export const useListTasks = <TData = Awaited<ReturnType<typeof listTasks>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listTasks>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getListTasksQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}


export const createTask = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreateTask201>> => {
    return axios.post(
      `/api/tasks`,undefined,options
    );
  }



export const getCreateTaskMutationOptions = <TError = AxiosError<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTask>>, TError,TVariables, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createTask>>, TError,TVariables, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTask>>, TVariables> = () => {
          

          return  createTask(axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type CreateTaskMutationResult = NonNullable<Awaited<ReturnType<typeof createTask>>>
    
    export type CreateTaskMutationError = AxiosError<unknown>

    export const useCreateTask = <TError = AxiosError<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTask>>, TError,TVariables, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getCreateTaskMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const updateTask = (
    taskId: string,
    updateTaskBody: UpdateTaskBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UpdateTask200>> => {
    return axios.patch(
      `/api/tasks/${taskId}`,
      updateTaskBody,options
    );
  }



export const getUpdateTaskMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTask>>, TError,{taskId: string;data: UpdateTaskBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateTask>>, TError,{taskId: string;data: UpdateTaskBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTask>>, {taskId: string;data: UpdateTaskBody}> = (props) => {
          const {taskId,data} = props ?? {};

          return  updateTask(taskId,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateTaskMutationResult = NonNullable<Awaited<ReturnType<typeof updateTask>>>
    export type UpdateTaskMutationBody = UpdateTaskBody
    export type UpdateTaskMutationError = AxiosError<unknown>

    export const useUpdateTask = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTask>>, TError,{taskId: string;data: UpdateTaskBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUpdateTaskMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteTask = (
    taskId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/api/tasks/${taskId}`,options
    );
  }



export const getDeleteTaskMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTask>>, TError,{taskId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTask>>, TError,{taskId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTask>>, {taskId: string}> = (props) => {
          const {taskId} = props ?? {};

          return  deleteTask(taskId,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteTaskMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTask>>>
    
    export type DeleteTaskMutationError = AxiosError<unknown>

    export const useDeleteTask = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTask>>, TError,{taskId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteTaskMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
